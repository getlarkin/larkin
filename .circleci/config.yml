version: 2

defaults: &defaults
  docker:
    - image: acro5piano/circleci-docker-image-node-10.3.0-awscli-ansible
  working_directory: ~/repo

aliases:
  - &setup_awscli
      name: install aws cli
      command: |
        mkdir ~/.aws
        echo '[default]' >> ~/.aws/credentials
        echo aws_access_key_id = $AWS_ACCESS_KEY_ID >> ~/.aws/credentials
        echo aws_secret_access_key = $AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials
        echo region = ap-northeast-1 >> ~/.aws/credentials
  - &restore_cache
      keys:
        - v1-dependencies-{{ checksum "yarn.lock" }}
        - v1-dependencies-
  - &save_cache
      paths:
        - /home/circleci/repo/node_modules
      key: v1-dependencies-{{ checksum "yarn.lock" }}

jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: yarn install
      - save_cache: *save_cache
      - run: *setup_awscli
      - run:
          name: check ts
          command: |
            cp .env.local ./packages/frontend/.env
            cp .env.local ./packages/api/.env
            yarn tsc
  deploy:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: yarn install
      - save_cache: *save_cache
      - run: *setup_awscli
      - run:
          name: decrypt
          command: |
            openssl aes-256-cbc -a -d -k $MASTER_KEY -in .env.production.encrypted > .env
            openssl aes-256-cbc -a -d -k $MASTER_KEY -in hosts.ini.encrypted > hosts.ini
      - run:
          name: install deploy tools
          command: |
            sudo pip3 install ansible awscli
      - run:
          name: deploy
          command: |
            cp .env ./packages/frontend/.env
            source .env
            yarn build:frontend
            yarn setup:ansible
            ansible-playbook provision_real/site.yml --tags deploy --limit appservers,registryservers
            aws configure set preview.cloudfront true
            aws s3 sync --acl public-read ./packages/frontend/build/ s3://docker-run.com/
            aws s3 sync --acl public-read ./packages/frontend/build/ s3://larkin.sh
            aws cloudfront create-invalidation --distribution-id ERCZDB0NA4VCO --paths '/*'

workflows:
  version: 2
  master_jobs:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - easy-setup
